{#
Nunjucks Templating!
Homepage: https://mozilla.github.io/nunjucks/
Docs: https://mozilla.github.io/nunjucks/api.html
#}

{% set pageid = 'stylesheets' %}
{% set sectionid = 'getting-started' %}

{% extends 'layouts/application.njk' %}

{% block metaTitle %}Stylesheets | Atomic: Getting started{% endblock %}

{% block content %}

<h1 class="Article-title">Stylesheets</h1>
<p class="Text--lead">An overview of all things stylesheets.</p>

<h2 id="section-file-structure"><a href="#section-file-structure" class="Text--resetLink">Sass file structure</a></h2>

<div class="docs-example"><div class="scrollXauto"><pre>scss/
|-- settings/                           # global variables
|   |-- settings.global.scss            # global base line variables (font size, line-height etc.)
|   |-- settings.colors.scss            # define color palette and assign to global variables
|   |-- settings.media-queries.scss     # define media query settings
|   |-- settings.z-index.scss           # define z-index levels to be used globally
|   ...
|-- vendor/                             # vendor specific styles (include early for easy overrides)
|   |-- vendor.jqueryui.scss            # eg. of a vendor specific file
|   ...
|-- tools/                              # global mixins, functions, helpers
|   |-- libs/                           # third party mixin libraries (includes bourbon, sass-mq, gel-typography, gel-sass-tools)
|   |   ...
|   |-- mixins/                         # custom mixins (authored by us)
|   |   |-- tools.center-block.scss
|   |   |-- tools.hide-visually.scss
|   |   ...
|-- generic/                            # high level global styles eg. box-sizing, reset, fonts, html & body etc.
|   |-- generic.fonts.scss              # Importing any custom fonts
|   |-- generic.base.scss               # Settings for HTML and BODY elements
|   ...
|-- vendor/                             # any styles relating to third-party plugins etc.
|   |-- vendor.pluginName.scss
|   ...
|-- base/                               # Unclassed basic html elements
|   |-- typography/                     # all the typographical elements
|   |   |-- base.headings.scss          # base styles for headings
|   |   |-- base.lists.scss             # base styles for lists
|   |   ...
|   ...                                 # any other base elements
|-- components/                         # UI specific components
|-- |-- common/
|   |   |-- button/                                 # Complicated components can be split into separate file and put in a directory
|   |   |   |-- component.button.scss               # Button master file (imports others)
|   |   |   |-- component.button.definition.scss    # Button global definition
|   |   |   |-- component.button.theme.scss         # Presentation style
|   |   |   |-- comonpent.button-basic.theme.scss   # Presentation styles for primary modifier
|   |   |-- component.close.scss        # More simple components can be kept in their own file
|-- |-- objects/
|   |   |-- media/                      # Object are layout specific components
|   |   |   |-- object.media.scss       # Object styles
|   ...
|-- trumps/                             # Utilities, helpers, overrides and browser hacks
|   |-- trumps.typography.scss          # typography utilities like .t-nobr or .t-Text--center
    |-- trumps.print.scss               # any print specific styles
|   ...
|   |-- trumps.shame.scss               # place for any quick fixes or dirty hacks (must be refactored into the code base eventually)
|-- docs/                               # place for all the documentation specific styles
lint.yml                                # config file for sass-lint
styles.scss                             # main stylesheet
basic.scss                              # example of multiple stylesheets, if you need to break them up
docs.scss                               # documentation specific stylesheet</pre>
</div></div>

<h3>ITCSS</h3>
<p>This scss file structure follows the <a href="http://www.creativebloq.com/web-design/manage-large-scale-web-projects-new-css-architecture-itcss-41514731/2">ITCSS (Inverted triangle CSS)</a> methodology.</p>
<p>ITCSS splits styles into 8 layers and the theory dictates that the layers go from the most generic, universal styles and increase in specificity with every layer (hence the inverted triangle).</p>
<p>This format allows us to write our styles in an order that only ever adds to and inherits from what came previously.</p>
<h4>Layers</h4>
<p>Each of these layers has it own directory in the file system.</p>

<dl class="Definition Definition--horizontal">
  <dt>Settings</dt><dd>Global variables (must be prefixed with 'g-' eg. g-base-font-size) - component/object specific variables should be in the partial it relates to</dd>
  <dt>Tools</dt><dd>Global mixins and functions - component/object specific mixins/functions should be in the partial it relates to</dd>
  <dt>Generic</dt><dd>High level global styles - Eg. Reset, box-sizing</dd>
  <dt>Vendor</dt><dd>Third party styles for plugins -included before our custom styles so they can be over-written</dd>
  <dt>Elements</dt><dd>Base styling for bare un-classed HTML elements</dd>
  <dt>Objects</dt><dd>Non-cosmetic design patterns often concerned with layout, should be re-usable - eg. o-Wrapper</dd>
  <dt>Components</dt><dd>UI specific component styling</dd>
  <dt>Trumps</dt><dd>Utilities, helpers, overrides and browser hacks. These should be minimal if everything above is correct. Eg. .clearfix</dd>
</dl>

<hr>

<h2 id="section-gulp-tasks"><a href="section-gulp-tasks" class="Text--resetLink">Gulp tasks</a></h2>

<h3>CSS task</h3>
<p>The css task runs on initial build and when any of the scss files are amended.<br>The task:</p>
<ul>
  <li>compiles the sass to css</li>
  <li>runs it through autoprefixer to add browser prefixes</li>
  <li>if in production mode, it minifies the CSS with CSSNano</li>
  <li>if in dev mode, it writes source maps for easy debugging</li>
  <li>writes the css files to their place in the public folder</li>
  <li>refreshes browsersync</li>
</ul>

<h3>SCSS Lint</h3>
<p>The lint task run whenever an scss file changes.<br>The task:</p>
<ul>
  <li>runs the scss files through scss linter</li>
  <li>reports any errors/warning to the console</li>
  <li>writes a report into the log directory in the project root</li>
</ul>

<hr>

<h2 id="section-naming-conventions"><a href="section-naming-conventions" class="Text--resetLink">Naming conventions</a></h2>

<h3>Class names</h3>
<p>The naming convention for classes is based on <a href="https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md">SUIT.CSS</a>) but adapted slightly to suit the ITCSS structure and our principles.</p>

<h4>Objects</h4>
<p>
  <strong>Syntax:&nbsp; </strong> <code>o-&lt;ObjectName&gt;[Xxs|Xs|Sm|Md|Lg|Xl|Xxl][-decendentName][--modifierName]</code><br>
  <strong>Example:</strong> <code>o-SizeMd-gridCell--cellCollapse</code>
</p>

<p>Object class names consist of:</p>
<ul>
  <li><strong>Object prefix (o-)</strong> - <em>Mandatory</em> - to easily distinguish between Object classes and Component classes (which don't have a prefix)</li>
  <li><strong>Object name (ObjectName)</strong> - <em>Mandatory</em> - must be pascal case</li>
  <li><strong>Responsive utility (Sm)</strong> - <em>Not Mandatory</em> - corresponds to the responsive breakpoints defined in the Settings folder</li>
  <li><strong>Descendant name (-descendantName)</strong> - <em>Not Mandatory</em> - is attached to a decendant node of an object - must be camel case</li>
  <li><strong>Modifier name (--modifierName)</strong> - <em>Not Mandatory</em> - modifies the presentation of the base component in some form - must be camel case</li>
</ul>

<h4>Components</h4>
<p>
  <strong>Syntax:&nbsp; </strong> <code>&lt;ComponentName&gt;[Xxs|Xs|Sm|Md|Lg|Xl|Xxl][-decendentName][--modifierName]</code><br>
  <strong>Example:</strong> <code>Media-figureXxl--wide</code>
</p>

<p>Component class names consist of:</p>
<ul>
  <li><strong>Component name (ComponentName)</strong> - <em>Mandatory</em> - must be pascal case</li>
  <li><strong>Responsive utility (Sm)</strong> - <em>Not Mandatory</em> - corresponds to the responsive breakpoints defined in the Settings folder</li>
  <li><strong>Descendant name (-descendantName)</strong> - <em>Not Mandatory</em> - is attached to a decendant node of an object - must be camel case</li>
  <li><strong>Modifier name (--modifierName)</strong> - <em>Not Mandatory</em> - modifies the presentation of the base component in some form - must be camel case</li>
</ul>

<h4>Trumps</h4>
<p>
  <strong>Syntax:&nbsp; </strong> <code>trumpName</code><br>
  <strong>Example:</strong> <code>Text--resetLink</code>
</p>

<p>Trump class names consist of:</p>
<ul>
  <li><strong>Trump name (trumpName)</strong> - <em>Mandatory</em> - must be camel case</li>
</ul>

<h4>State classes</h4>
<p>
  <strong>Syntax:&nbsp; </strong> <code>[ComponentName|o-ObjectName][--is|--has]-stateName</code><br>
  <strong>Example:</strong> <code>.MainMenu-item--has-children</code> or <code>.MainMenu--is-active</code>
</p>

<p>State class names consist of:</p>
<ul>
  <li><strong>Component/object name (o-ObjectName)</strong> - <em>Mandatory</em> - must be pascal case</li>
  <li><strong>State prefix (--is)</strong> - <em>Mandatory</em> - can be 'is' or 'has' (is-active or has-children)</li>
  <li><strong>State name (active)</strong> - <em>Mandatory</em> - descriptive title (eg. active)</li>
</ul>

<h4>Theme classes</h4>
<p>
  <strong>Syntax:&nbsp; </strong> <code>th-&lt;ComponentName&gt;</code><br>
  <strong>Example:</strong> <code>.th-MainMenu</code>
</p>

<p>To keep a separation between structural styles and presentational styles, it recommended to use theme classes to attach presentational styles to.</p>
<p>This is to make it easier to re-skin, or make style adjustments.</p>

<p>Theme class names consist of:</p>
<ul>
  <li><strong>Theme prefix (th-)</strong> - <em>Mandatory</em> - to easily distinguish between structural and presentational styles</li>
  <li><strong>Component/object name (o-ObjectName)</strong> - <em>Mandatory</em> - must be pascal case</li>
  <li><strong>State prefix (--is)</strong> - <em>Mandatory</em> - can be 'is' or 'has' (is-active or has-children)</li>
  <li><strong>State name (active)</strong> - <em>Mandatory</em> - descriptive title (eg. active)</li>
</ul>

<h3>File names</h3>
<p>
  <strong>Syntax:&nbsp; </strong> <code>_&lt;section-name&gt;.&lt;component-name&gt;.&lt;modifier&gt;.scss</code><br>
  <strong>Example:</strong> <code>_component.button-basic.theme.scss</code> or <code>_object.grid.md.scss</code>
</p>

<p>SCSS File names are made up of:</p>
<ul>
  <li><strong>Section name (_setting)</strong> <em>Mandatory</em></li>
  <li><strong>Component/object name (grid)</strong> <em>Mandatory</em></li>
  <li><strong>Modifier (-hover)</strong> <em>Not Mandatory</em> Used when a components styles need splitting up.</li>
</ul>

<p><strong>Examples:</strong><br>
<code>
_component.button.scss<br>
_component.button.definition.scss<br>
_component.button.theme.scss<br>
_component.button-primary.theme.scss<br>
_component.button.states.scss
</code>
</p>

<h2 id="section-coding-style"><a href="#section-coding-style" class="Text--resetLink">Coding style</a></h2>

<h3>Anatomy of a scss class</h3>

<ol>
  <li>$variables - should always appear at the top and should only be relative to this particular class</li>
  <li>@extend(s) - although these should be avoided, if needed, should be placed at the top (after any variables)</li>
  <li>@include(s) - mixins, should be placed at the top too (after any variables or extends)</li>
  <li>Properties of the selector - in no particular order</li>
  <li>Pseudo selectors (eg. :hover, :last-child etc.)</li>
  <li>Child element selectors - remember not to nest more than 2 deep. Add a sub class if there is too much nesting</li>
  <li>State classes - any classes regarding state eg. .MainMenu--is-active.</li>
</ol>

<h3>Anatomy of a Component/Object</h3>

<p>Depending on the complexity and requirements of a particular component, the scss files can be split in different ways.</p>
<p>A small, uncomplicated component may only consist of one file, eg. <code>_component.simple-component.scss</code></p>

<p>But more complicated components may be split into separate files. This makes it easy to exclude parts unneeded part of the component.</p>

<p><strong>Button component example:</strong></p>
<code>
_component.button.scss                #imports the require component files<br>
_component.button.definition.scss     #base, shared styles for all buttons<br>
_component.button.theme.scss          #default styles for a standard button<br>
_component.button-primary.theme.scss  #styles for a primary button<br>
_component.button-basic.theme.scss    #styles for a basic button<br>
_component.button.md.scss             #response adjustment to button at a medium breakpoint
</code>

<h3>Variables</h3>
<h4>Global variables</h4>
<ul>
  <li>Prefix global variable with `g-` to differentiate them from component specific variables</li>
  <li>When utilising a global variable within a component, assign it to local variable at the top of the page or class. This help to decouple a component for re-use in other projects.</li>
</ul>

<h4>Variablise* all common numbers and numbers with meaning</h4>
<p>If you find yourself using a number other than 0 or 100% over and over, it likely deserves a variable. Since it likely has meaning and controls consistency, being able to tweak it en masse may be useful.<br>
If a number clearly has strong meaning, that's a use case for variablising* as well.</p>
<p><small>* new word</small></p>

<h3>Mixins</h3>
<ul>
  <li>Mixins that output selectors should be capital-case: @mixin GridBuilder</li>
  <li>Mixins that output only properties should be camel-case: @mixin borderBox</li>
  <li>Private mixins that are not used outside of the current file should be prefixed with a dash: @mixin -gridHelper</li>
  <li>Mixins should be documented - with example use cases</li>
</ul>

<h3>SASS Lint</h3>
<p>Atomic comes with a <a href="https://www.npmjs.com/package/gulp-sass-lint">SASS linter</a> built in. You can view the configuration options in the <code>lint.yml</code> in the root of stylesheet.</p>
<p>Any errors or warnings will be logged on the console.</p>

<h2 id="section-browser-strategy"><a href="#section-browser-strategy" class="Text--resetLink">Browser strategy</a></h2>
<p>Atomic is set up to serve older versions of IE (&lt; v10) a separate universal stylesheet.</p>

{% endblock %}

{% block javascript %}
{% endblock %}