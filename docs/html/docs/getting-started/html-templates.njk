{#
Nunjucks Templating!
Homepage: https://mozilla.github.io/nunjucks/
Docs: https://mozilla.github.io/nunjucks/api.html
#}

{% set pageid = 'html-templates' %}
{% set sectionid = 'getting-started' %}

{% extends 'layouts/application.njk' %}

{% block metaTitle %}HTML templates | Atomic: Getting started{% endblock %}

{% block content %}

<h1 class="Article-title">HTML templates</h1>
<p class="Text--lead">Atomic uses <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> as our templating solution.</p>
<p>Nunjucks is nearly identical in syntax to Twig (PHP), and replaces Swig (and Twig-like js templating language), which is no longer maintained.</p>
<a href="https://mozilla.github.io/nunjucks/templating.html" class="Button Button--primary">Nunjucks templating docs</a>
<hr>

<h2 id="section-file-structure"><a href="#section-file-structure" class="Text--resetLink">File structure</a></h2>

<div class="docs-code docs-code--files"><div class="scrollXauto"><pre>html
|-- data         # data that will be made accessible to your templates
|-- layouts      # nunjucks layout templates
|-- macros       # nunjucks helper functions (icon helper is an example)
|-- shared       # nunjucks shared includes (eg. global menus etc.)
|-- docs          # templates for this documentation site (can be deleted for project work)
index.njk         # prototype root file (homepage)
</div></div>

<h2 id="section-usage"><a href="#section-usage" class="Text--resetLink">Usage</a></h2>

<h3>Data</h3>
<p>The <code>data</code> directory is where you set up the data sources for your prototype.</p>
<p>This will mirror the data sources in the back end, so it is probably best to work with a backend developer to set this up.</p>
<p>By default, the <code>data</code> folder contains the <code>global.json</code>, the global data object that is available for all the templates.</p>
<p>For template specific data, create a data (.json) file with the same filename as the template. Currently, for these docs, there is a icon.json file that is used to populate the icons on the icon docs page.</p>

<h3>Layouts</h3>
<p>These are like Master templates that template pages extend to make a full page.</p>

<div class="docs-code docs-code--html">
  <pre><code class="html">&lt;!-- import icon helper macro --&gt;
&#123;% from 'macros/icon.njk' import icon %&#125;
&lt;!doctype html&gt;
&lt;html lang="en-GB"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  ...
  &lt;title&gt;&#123;% block metaTitle %&#125;Gulp Asset Pipeline&#123;% endblock %&#125;&lt;/title&gt;
  &lt;link rel="stylesheet" href="/stylesheets/styles.css"&gt;
  ...
  &#123;% include 'shared/app-icons.njk' %&#125; &lt;!-- import shared favicons --&gt;
  &#123;% block head %&#125;&#123;% endblock %&#125; &lt;!-- block content hook for head --&gt;
&lt;/head&gt;
&lt;body id="top" class="o-Site scrollY"&gt;
  &lt;header role="banner" class="o-Site-header docs-GlobalHeader"&gt;...&lt;/header&gt;
  &lt;main id="content" class="o-Site-content"&gt;
  &#123;% block main %&#125; &lt;!-- block main content hook --&gt;
    &lt;div class="o-Container o-Container--centered"&gt;
      &lt;div class="o-Grid o-GridMd--reverse o-GridMd--gutters o-GridXl--guttersXl"&gt;
        &lt;article class="o-Grid-cell o-SizeMd--3of4 o-SizeLg--4of5 o-SizeXl--5of6"&gt;
          &#123;% block content %&#125;&#123;% endblock %&#125; &lt;!-- block content content hook --&gt;
        &lt;/article&gt;
        &lt;section data-sticky-container class="o-Grid-cell o-Size--full o-SizeMd--1of4 o-SizeLg--1of5 o-SizeXl--1of6"&gt;
          &#123;% block sidebar %&#125;
            &#123;% include 'shared/docs/page-nav.njk' %&#125; &lt;!-- import share page nav --&gt;
          &#123;% endblock %&#125;
        &lt;/section&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &#123;% endblock %&#125;
  &lt;/main&gt;
  &lt;footer role="contentinfo" class="o-Site-footer docs-footer"&gt;...&lt;/footer&gt;
  &#123;% block javascript %&#125;&#123;% endblock %&#125; &lt;!-- block javascript content hook --&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>

<p>When writing a template, you can define "blocks" that child templates can override or insert content into (<code>{% block contentArea %}{% endblock %}</code>).</p>

<h3>Macros</h3>
<p>Macros allow you to define reusable chunks of content. It is similar to a function in a programming language.</p>

<div class="docs-code docs-code--html">
  <pre><code class="html">&#123;% macro navItem(id, title, active='index', ready=false) %&#125;
&lt;li class="Menu-item&#123;% if id == active %&#125; is-active&#123;% endif %&#125;"&gt;
  &lt;a&#123;% if ready %&#125; href="&#123;&#123;id&#125;&#125;.html" class="Menu-link"&#123;% else %&#125; class="Menu-link Text--disabled"&#123;% endif %&#125;&gt;&#123;&#123;title&#125;&#125;&lt;/a&gt;
&lt;/li&gt;
&#123;% endmacro %&#125;</code></pre>
</div>

<p>The above macro is used to generate the menu items for the pages of this document section. It sets an active class if the page is currently active and sets the menu item to disabled if the menu item is not ready.</p>

<h3>More info on templating in Nunjucks</h3>
<a href="https://mozilla.github.io/nunjucks/templating.html" class="Button Button--primary">Nunjucks templating docs</a>

{% endblock %}

{% block javascript %}
{% endblock %}