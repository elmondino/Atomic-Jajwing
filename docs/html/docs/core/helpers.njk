{#
Nunjucks Templating!
Homepage: https://mozilla.github.io/nunjucks/
Docs: https://mozilla.github.io/nunjucks/api.html
#}

{% set pageid = 'helpers' %}
{% set sectionid = 'core' %}

{% extends 'layouts/application.njk' %}

{% block metaTitle %}Helpers | Atomic: Core{% endblock %}

{% block content %}

<h1 class="Article-title">Helpers</h1>
<p class="Text--lead">A collection of individually importable modules aimed at making coding easier</p>

<div class="Bookmarks" data-module="Bookmarks"></div>

<hr class="Article-divider">

<h2 id="section-create-element"><a href="#section-create-element" class="Text--resetLink">Create Element</a></h2>
<p>This is shortcut for the long winded <code>document.createElement()</code> method of creating elements on the fly.</p>
<p>You pass in an object with all values you need.</p>

<div class="docs-code docs-code--js">
  <pre><code class="javascript">import createElement from &quot;../helpers/createElement&quot;

document.body.appendChild(createElement({
  tagName: &quot;div&quot;,
  className: &quot;my-class&quot;,
  text: &quot;Blah blah&quot;,
  attributes: {
    &quot;id&quot;: &quot;element id&quot;,
    &quot;data-truc&quot;: &quot;value&quot;
  },
  childs: [{ /* recursif call **/}]
}))
</code></pre>
</div>

<h2 id="section-sibling"><a href="#section-sibling" class="Text--resetLink">Sibling</a></h2>
<p>When traversing sibling elements in the DOM using <code>nextSibling</code> and <code>prevSibling</code>, if there is any white space in the HTML in between elements, then the white-space is treated as the next/prev sibling (#text).</p>
<p>This function checks the nodeType property of the next/prev sibling and traverses until it finds the next/prev actual DOM element.</p>

<div class="docs-code docs-code--js">
  <pre><code class="javascript">import sibling from &quot;../helpers/sibling&quot;

const nextEle = sibling(this.el, 'nextSibling')</code></pre>
</div>

<h2 id="section-for-each"><a href="#section-for-each" class="Text--resetLink">For Each</a></h2>
<p>Function that loops through an array (or node list) and executes a callback on each one.</p>

<div class="docs-code docs-code--js">
  <pre><code class="javascript">import forEach from &quot;../helpers/forEach&quot;

const </code></pre>
</div>

<h2 id="section-dom"><a href="#section-dom" class="Text--resetLink">DOM</a></h2>
<p>A few DOM shortcut functions that provide a jQuery like syntax (without the bloat).</p>

<div class="docs-code docs-code--js">
  <pre><code class="javascript">import {$} from &quot;../helpers/dom&quot;

$(&quot;.addClass&quot;).addClass(&quot;passed&quot;);
$(&quot;.removeClass&quot;).removeClass(&quot;failed&quot;);
$(&quot;.toggleClass&quot;).toggleClass(&quot;is-active&quot;);

if ($(&quot;.hasClass&quot;).hasClass(&quot;hasClass&quot;)) {
  $(&quot;.hasClass&quot;).addClass(&quot;passed&quot;);
}

$(&quot;a&quot;).on(&quot;click&quot;, function(e) {
  e.preventDefault();
  alert(&quot;clicked&quot;);
});</code></pre>
</div>

<dl>
  <dt>Functions include:</dt>
  <dd>addClass - <code>$('.link').addClass('newClass')</code></dd>
  <dd>removeClass - <code>$('.link').removeClass('oldClass')</code></dd>
  <dd>hasClass - <code>if ($('.link').hasClass('class')( {...}</code></dd>
  <dd>toggle - <code>if ($('.link').toggle('class')( {...}</code></dd>
  <dd>each - <code>$('.link').each(function () {})</code></dd>
  <dd>on - <code>$('.link').on('click', function () {})</code></dd>
  <dd>find - <code>$('.container').find('.child')</code></dd>
</dl>

<h2 id="section-css"><a href="#section-css" class="Text--resetLink">CSS</a></h2>
<p>Function that allows you to pass in an javascript object of css styles and they are then applied to the target element.</p>

<div class="docs-code docs-code--js">
  <pre><code class="javascript">import css from &quot;../helpers/css&quot;

var target = document.getElementById('target')
css(target, {
  background: '#000',
  marginTop: '20px'
})</code></pre>
</div>

<h2 id="section-ready"><a href="#section-ready" class="Text--resetLink">Ready</a></h2>
<p>Function that wait until the whole DOM is loaded and then executes the callback. Much like jquery's $(document).ready()</p>

<div class="docs-code docs-code--js">
  <pre><code class="javascript">import ready from &quot;../helpers/ready&quot;

</code></pre>
</div>

<h2 id="section-vergejs"><a href="#section-vergejs" class="Text--resetLink">Verge.js</a></h2>
<p><a href="https://github.com/ryanve/verge">Verge</a> is a set of viewport utilities written in native JavaScript. It includes the ability to detect if an element is in the current viewport.</p>
<p>It is installed via NPM and can be included in your modules by adding <code>import verge from 'verge'</code></p>
<dl>
  <dt>API:</dt>
  <dd><a href="https://github.com/ryanve/verge#viewportw">viewportW()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#viewporth">viewportH()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#viewport">viewport()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#inviewport">inViewport()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#inx">inX()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#iny">inY()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#scrollx">scrollX()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#scrolly">scrollY()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#mq">mq()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#rectangle">rectangle()</a></dd>
  <dd><a href="https://github.com/ryanve/verge#aspect">aspect()</a></dd>
</dl>

<h2 id="section-cookies"><a href="#section-cookies" class="Text--resetLink">Cookies</a></h2>
<p><a href="https://github.com/ScottHamper/Cookies">Cookies</a> is a set of cookie utilities written in native JavaScript.</p>
<p>It is installed via NPM and can be included in your modules by adding <code>import Cookies from 'js-cookie'</code>.</p>
<dl>
  <dt>API:</dt>
  <dd>set - <code>Cookies.set('name', 'value')</code></dd>
  <dd>get - <code>Cookies.get('name')</code></dd>
  <dd>remove - <code>Cookies.remove('name')</code></dd>
</dl>

{% endblock %}

{% block javascript %}

{% endblock %}